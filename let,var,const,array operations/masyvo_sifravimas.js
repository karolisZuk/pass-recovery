// Atlikus veiksmus is duoto masyvo gauti slaptazodi
//
// Veiksmai 
//  3. Pasalinti 3 paskutinius masyvo elementus
//  4. pritaikykite sia funkcija kiekvienam masyvo elemetui.
        binary2Text = (binaryString) => {
            return binaryString.split(' ').map(char => {
                    return String.fromCharCode(parseInt(char, 2));
            }).join('');
        }
//  5. remove first six characters of every word
//  6. Split array in half.
//  7. Ismesti (isfiltruoti) is masyvo visus zodzius kurie pasibaigia raide s.
//  8. Apversti masyva.

const scramble = ['110001 110010 110110 1111000 1100100 1100101 1110111 1101001 1101110 1100100 1101111 1110111 1110011',
​​​​​                  '110001 110010 110110 1111000 1100100 1100101 1100100 1100101 1100110 1101001 1101110 1100101 1110011',
​​​​​                  '110001 110010 110110 1111000 1100100 1100101 1110101 1101110 1100100 1100101 1100110 1101001 1101110 1100101 1100100',
​​​​​                  '110001 110010 110110 1111000 1100100 1100101 1110100 1101000 1100101',
​​​​​                  '110001 110010 110110 1111000 1100100 1100101 1111001 1101111 1110101 1110010 1110011',
                ​​​​​  '110001 110010 110110 1111000 1100100 1100101 1100100 1100101 1100110 1101001 1101110 1100101',
                ​​​​​  '110001 110010 110110 1111000 1100100 1100101 1111001 1101111 1110101',
                ​​​​​  '110001 110010 110110 1111000 1100100 1100101 1110011 1110100 1100001 1111001 1110011',
                ​​​​​  '110001 110010 110110 1111000 1100100 1100101 1110101 1101110 1110100 1101001 1101100',
                ​​​​​  '110001 110010 110110 1111000 1100100 1100101 1100100 1101111 1100111 1110011',
                ​​​​​  '110001 110010 110110 1111000 1100100 1100101 1110101 1101110 1100100 1100101 1100110 1101001 1101110 1100101 1100100',
                ​​​​​  '110001 110010 110110 1111000 1100100 1100101 1110011 1110100 1100001 1111001',
                ​​​​​  '110001 110010 110110 1111000 1100100 1100101 1110111 1101001 1101100 1101100',
                ​​​​​  '110001 110010 110110 1111000 1100100 1100101 1110010 1110101 1101110 1110011',
                ​​​​​  '110001 110010 110110 1111000 1100100 1100101 1110101 1101110 1100100 1100101 1100110 1101001 1101110 1100101 1100100',
                ​​​​​  '110001 110010 110110 1111000 1100100 1100101 1100101 1101100 1100101 1101101 1100101 1101110 1110100 1110011',
                ​​​​​  '110001 110010 110110 1111000 1100100 1100101 1110111 1101001 1101110 1100100 1101111 1110111 1110011',
                ​​​​​  '110001 110010 110110 1111000 1100100 1100101 1100100 1100101 1100110 1101001 1101110 1100101 1110011',
                ​​​​​  '110001 110010 110110 1111000 1100100 1100101 1110101 1101110 1100100 1100101 1100110 1101001 1101110 1100101 1100100',
                ​​​​​  '110001 110010 110110 1111000 1100100 1100101 1110100 1101000 1100101',
                ​​​​​  '110001 110010 110110 1111000 1100100 1100101 1111001 1101111 1110101 1110010 1110011',
                ​​​​​  '110001 110010 110110 1111000 1100100 1100101 1100100 1100101 1100110 1101001 1101110 1100101',
                ​​​​​  '110001 110010 110110 1111000 1100100 1100101 1111001 1101111 1110101',
                ​​​​​  '110001 110010 110110 1111000 1100100 1100101 1110011 1110100 1100001 1111001 1110011',
                ​​​​​  '110001 110010 110110 1111000 1100100 1100101 1110101 1101110 1110100 1101001 1101100',
                ​​​​​  '110001 110010 110110 1111000 1100100 1100101 1100100 1101111 1100111 1110011',
                ​​​​​  '110001 110010 110110 1111000 1100100 1100101 1110101 1101110 1100100 1100101 1100110 1101001 1101110 1100101 1100100',
                ​​​​​  '110001 110010 110110 1111000 1100100 1100101 1110011 1110100 1100001 1111001',
                ​​​​​  '110001 110010 110110 1111000 1100100 1100101 1110111 1101001 1101100 1101100',
                ​​​​​  '110001 110010 110110 1111000 1100100 1100101 1110010 1110101 1101110 1110011',
                ​​​​​  '110010 110101 110110 1100101 1110100 1101001 1110101 1101110 1100100 1100101 1100110 1101001 1101110 1100101 1100100',
                ​​​​​  '110001 110010 110110 1111000 1100100 1100101 1100101 1101100 1100101 1101101 1100101 1101110 1110100 1110011',
                '110001 110010 110110 1111000 1100100 1100101 1100101 1101100 1100101 1101101 1100101 1101110 1110100 1110011',
                '110001 110010 110110 1111000 1100100 1100101 1100101 1101100 1100101 1101101 1100101 1101110 1110100 1110011',
                '110001 110010 110110 1111000 1100100 1100101 1100101 1101100 1100101 1101101 1100101 1101110 1110100 1110011'
            ];​​​​​

let astuntas = scramble.reverse();
let septintas = astuntas.filter(elem => elem.slice(-1) != 's');
let sestas = septintas.splice(0, septintas.length/2);
let penktas = sestas.map(elem => elem.substr(6));
let ketvirtas = scramble.map(elem => binary2Text(elem));
let trecias = scramble.splice(-3);

console.log(trecias);

// Slaptazodis: undefined stays undefined unless you define the undefined

binary2Text = (binaryString) => {
    return binaryString.split(' ').map(char => {
            return String.fromCharCode(parseInt(char, 2));
    }).join('');
}